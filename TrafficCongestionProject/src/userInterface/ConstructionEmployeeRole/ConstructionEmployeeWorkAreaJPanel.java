/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.ConstructionEmployeeRole;

import business.CongestionSolutionConstruction.CongestionSolutionConstruction;
import business.CongestionSolutionConstruction.CongestionSolutionConstructionDirectory;
import business.Enterprise.Enterprise;
import business.Organization.ConstructionEmployeeOrganization;
import business.Route.Route;
import business.UserAccount.UserAccount;
import business.WorkQueue.CongestionSolutionWorkRequest;
import business.WorkQueue.WorkRequest;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

public class ConstructionEmployeeWorkAreaJPanel extends javax.swing.JPanel {
    
    private JPanel userProcessContainer;
    private ConstructionEmployeeOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private CongestionSolutionConstructionDirectory congestionSolutionConstructionDirectory;
    /**
     * Creates new form ConstructionManagerWorkAreaJPanel
     */
    public ConstructionEmployeeWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, ConstructionEmployeeOrganization organization, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = account;
        congestionSolutionConstructionDirectory=organization.getCongestionsolutionconstructiondirectory();
        populateConstructionTable();
        addCongestionSolutionsConstruction();
        populateConstructionComboBox();
    }

    public void populateConstructionTable(){
        DefaultTableModel defaultTableModel=(DefaultTableModel)constructionTable.getModel();
        
        defaultTableModel.setRowCount(0);
            for(WorkRequest workRequest:userAccount.getWorkQueue().getWorkRequestList()){
                Object row[]=new Object[9];
                row[0]=((CongestionSolutionWorkRequest)workRequest).getRoute();
                row[1]=((CongestionSolutionWorkRequest)workRequest).getRoute().isCongestion();
                row[2]=workRequest.getProblem();
                row[3]=workRequest.getRequestDate();
                row[4]=workRequest.getResolveDate();
                row[5]=workRequest.getSender();
                row[6]=workRequest.getReceiver();
                row[7]=(CongestionSolutionWorkRequest)workRequest;
                defaultTableModel.addRow(row);
            
        }
    }
    
    public void addCongestionSolutionsConstruction()
    {
        if(congestionSolutionConstructionDirectory.getCongestionSolutionConstructionList().isEmpty()){
        CongestionSolutionConstruction cp11=congestionSolutionConstructionDirectory.addCongestionSolutionConstruction();
        cp11.setSolutionName("Add Lane");
        CongestionSolutionConstruction cp12=congestionSolutionConstructionDirectory.addCongestionSolutionConstruction();
        cp12.setSolutionName("Upgrade road");
        CongestionSolutionConstruction cp13=congestionSolutionConstructionDirectory.addCongestionSolutionConstruction();
        cp13.setSolutionName("Build Overpass");
        CongestionSolutionConstruction cp14=congestionSolutionConstructionDirectory.addCongestionSolutionConstruction();
        cp14.setSolutionName("Build High Occupancy Lane");
        CongestionSolutionConstruction cp15=congestionSolutionConstructionDirectory.addCongestionSolutionConstruction();
        cp15.setSolutionName("Build Underpass");
        }
    }
    
    public void populateConstructionComboBox(){
        constructionComboBox.removeAllItems();
        for(CongestionSolutionConstruction congestionSolutionConstruction:congestionSolutionConstructionDirectory.getCongestionSolutionConstructionList())
        {
            constructionComboBox.addItem(congestionSolutionConstruction);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnConstruct = new javax.swing.JButton();
        constructionComboBox = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        constructionTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 204, 255));

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));

        btnConstruct.setFont(new java.awt.Font("Calibri Light", 1, 18)); // NOI18N
        btnConstruct.setText("Construct");
        btnConstruct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConstructActionPerformed(evt);
            }
        });

        constructionComboBox.setFont(new java.awt.Font("Calibri Light", 1, 18)); // NOI18N
        constructionComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        constructionTable.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        constructionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Route Name", "Congested?", "Type of Problem", "Start date", "End date", "Sender", "Receiver", "Proposed Solution"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(constructionTable);

        jLabel2.setFont(new java.awt.Font("Calibri Light", 1, 18)); // NOI18N
        jLabel2.setText("Select type of Construction:");

        jLabel1.setFont(new java.awt.Font("Calibri Light", 1, 24)); // NOI18N
        jLabel1.setText("Construction Employee Work Area:");

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/employee.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(143, 143, 143)
                        .addComponent(btnConstruct)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(constructionComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 686, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addGap(44, 44, 44))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(49, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(45, 45, 45))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(constructionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(btnConstruct)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 6, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(136, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnConstructActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConstructActionPerformed
        // TODO add your handling code here:
        CongestionSolutionConstruction congestionSolutionConstruction=(CongestionSolutionConstruction)constructionComboBox.getSelectedItem();
        int selectedRow=constructionTable.getSelectedRow();
        if(selectedRow>=0){
        CongestionSolutionWorkRequest workRequest=(CongestionSolutionWorkRequest)constructionTable.getValueAt(selectedRow, 7);
        Route route=(Route)constructionTable.getValueAt(selectedRow,0);
        if(route.isCongestion()==true){
        workRequest.setReceiver(userAccount);
        workRequest.setSolution(congestionSolutionConstruction.getSolutionName());
        Date date= new Date();
        workRequest.setResolveDate(date);
        
        route.setCongestion(false);
        route.setCongestionProblem("");
        route.setEventHandlerSolution(congestionSolutionConstruction.getSolutionName());
        route.setResolveDate(date);
        route.setReceiver(userAccount);
        userAccount.incrementSolved();
        populateConstructionTable();
        JOptionPane.showMessageDialog(null, "Congestion Problem solved Successfully!!", "Success", JOptionPane.INFORMATION_MESSAGE);
        }
        else
            JOptionPane.showMessageDialog(null, "No Congestion present!!", "Choose other Problem", JOptionPane.INFORMATION_MESSAGE);
        }
        else{
            JOptionPane.showMessageDialog(null, "Please select a row first. If no row present, that means, no Congestion Problem is assigned to the workqueue as of now!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnConstructActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConstruct;
    private javax.swing.JComboBox constructionComboBox;
    private javax.swing.JTable constructionTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
